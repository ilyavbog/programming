
EXACT_TOKEN_TYPES if type = OP
---------------------------------------------------------------------------------
line, pos                                                                       |
-------------------------------------------------------------------             |
line, pos                                                         |             |
---------------------------------------------------               |             |
                                                  |               |             |
[                                                 v               v             v
 {'type': 'NAME',    '  string': 'def',   'str': [1, 0],  'end': [1, 3],  'op': ''},
 {'type': 'NUMBER',    'string': '10',    'str': [1, 15], 'end': [1, 17], 'op': ''},
 {'type': 'STRING',    'string': "'car'", 'str': [7, 22], 'end': [7, 27], 'op': ''},
 {'type': 'OP',        'string': '(',     'str': [1, 14], 'end': [1, 15], 'op': 'LPAR'},
 {'type': 'NEWLINE',   'string': '\r\n',  'str': [1, 19], 'end': [1, 21], 'op': ''},
 {'type': 'NL',        'string': '\r\n',  'str': [3, 0],  'end': [3, 2],  'op': ''},
 {'type': 'INDENT',    'string': '    ',  'str': [2, 0],  'end': [2, 4],  'op': ''},
 {'type': 'DEDENT',    'string': '',      'str': [4, 0],  'end': [4, 0],  'op': ''},
 {'type': 'ENDMARKER', 'string': '',      'str': [29, 0], 'end': [29, 0], 'op': ''}



NAME,
NUMBER,
STRING,
OP,
NEWLINE
NL,
INDENT,
DEDENT,
ENDMARKER


and       elif    if      print
as        else    import  raise
assert    except  in      return
break     exec    is      try
class     finall  lambda  while
continue  for     not     which
def       from    or      yield
del       global  pass


???????? ????????
(...) ????????? ? ???????;
** ?????????? ? ???????;
~ + - ??????????????? ????????;
* / % // ?????????, ???????, ??????? ?? ??????, ????????????? ???????;
+ -   ???????? ? ?????????;
>> << ????????? ????? ?????? ? ????????? ????? ?????;
&  ???????? "?";
^ |   ???????? "?????????????? ???" ? ???????? "???";
<= < > >=   ????????? ?????????;
<> == != ????????? ?????????;
= %= /= //= -= += *= **=   ????????? ????????????;
is, is not  ????????????? ?????????;
in, not in  ????????? ????????;
not, or, and   ?????????? ?????????;


('<', '<=', '==', '!=', '>', '>=', 'in', 'not in', 'is', 'is not', 'exception match', 'BAD')
  0     1     2     3    4     5
cl /Zi /Yd t2bc.c
